@using Parallelism.Data;
@using System.Diagnostics;
@page "/LockOnlyOneThread"

<PageTitle>LockOnlyOneThread</PageTitle>

<h1>LockOnlyOneThread</h1>

<button class="btn btn-primary" @onclick="HandleValid">Click me</button>
<button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group">
                <textarea class="form-control" aria-label="With textarea">@text</textarea>
            </div>
        </div>
    
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private bool imageHidden = true;
    private string text = "";
    private HttpClient? httpClient;
    private CancellationTokenSource? cts;

    protected override void OnParametersSet(){
        base.OnParametersSet();
        httpClient = new();
    }

    private async Task HandleValid(){
        imageHidden = false;
        
        text += "Begin\r\n";
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(300);

        int incrementValue = 0;
        int sumValue = 0;
 
        Parallel.For(0, 10_000, number => 
        {
            Interlocked.Increment(ref incrementValue);
            Interlocked.Add(ref sumValue, incrementValue);
        });

        text+= $"No lock: Increment value {incrementValue} - Sum Value {sumValue}\r\n";
        
        //HACK: making use of a lock
        int incrementValueLock = 0;
        int sumValueLock = 0;
        
        Object mutex = new();
        Parallel.For(0, 10_000, number => 
        {
            lock(mutex){
                incrementValueLock++;
                sumValueLock += incrementValueLock;
            }
        });
        text+= $"No lock: Increment value {incrementValueLock} - Sum Value {sumValueLock}\r\n";

        text +="End\r\n";
        imageHidden = true;

    }
    private void HandleCancel() {
        text = "";
    }

}


<style>
    .input-group {
        height: 700px;
        margin: .4rem 0;
    }
</style>