
@using ConcurrencyApi.Helpers;
@using System.Text.RegularExpressions;
@using System.Diagnostics;
@using Parallelism.Data;
@using System.Collections.Concurrent;
@using System.Linq;

@page "/ParallelCards"

<PageTitle>ParallelCards</PageTitle>

<h1>ParallelCards</h1>

<button class="btn btn-primary" @onclick="HandleValid">Click me</button>
/<button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group">
                <textarea class="form-control" aria-label="With textarea">@text</textarea>
            </div>
        </div>

        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool imageHidden = true;
    private string text = "";
    //private HttpClient? httpClient;
    private int SemaphoreSize = Int32.MaxValue; //2;
    private CancellationTokenSource cts = new();
    
    private int nbCardsToProcess;
    protected override void OnParametersSet(){
        base.OnParametersSet();
        //httpClient = new();
    }

    private async Task HandleValid()
    {
        imageHidden = false;
        text = "";
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(300);

        nbCardsToProcess = 1000000;
        
        Stopwatch stopwatch = new();
        stopwatch.Start();
        cts = new();

        //List<Task<Card>> tasks = Enumerable.Range(1,nbCards).Select(async x =>
        //{
        //    return await CreateCard();
        //}).ToList();
        //await Task.WhenAll(tasks);
        //foreach (var item in tasks)
        //{
        //    Console.WriteLine(item.Result.CardName) ;
        //}

        try{
            //Select
            text += "Begin Select\r\n";
            await InvokeAsync(() => StateHasChanged());
            List<Task<Card>> tasks = await ProcessCardsSelect(nbCardsToProcess, cts.Token);
            
            double selectTime = stopwatch.ElapsedMilliseconds / 1000.0;
            text += $"Simultaneous Task (Select) - duration in seconds: {selectTime}\r\n";
            
            text += $"{tasks.Count} cards have been created\r\n";
            text += "------------ -------------\r\n";
            @* Console.WriteLine("------------ -------------\r\nSimultaneous Select Cards\r\n------------ -------------");
            foreach (var item in tasks){
              Console.WriteLine($"{item.Result.CardName}/{item.Result.ThreadId}") ;
            } *@


            //Parallel-ForEachAsync
            text += "Begin ParallelForEachAsync\r\n";
            await InvokeAsync(() => StateHasChanged());

            stopwatch.Restart();
            ConcurrentBag<Card> bagForEachAsync = await ProcessCardsParallelForEach(nbCardsToProcess, cts.Token);
            

            double parallelForEachAsyncTime = stopwatch.ElapsedMilliseconds / 1000.0;
            text += $"ParallelForEachAsync Task - duration in seconds: {parallelForEachAsyncTime}\r\n";
            await InvokeAsync(() => StateHasChanged());
            
            //Console.WriteLine("------------ -------------\r\nParallelForEachAsync Cards\r\n------------ -------------");
            int itemsInBagParallelForEachAsync = 0;
            while (!bagForEachAsync.IsEmpty){
                if (bagForEachAsync.TryTake(out Card? citem)){
                    //Console.WriteLine($"{citem.CardName}/{citem.ThreadId}");
                    itemsInBagParallelForEachAsync++;
                }
            };

            text += $"{itemsInBagParallelForEachAsync} cards have been created\r\n";
            text += "------------ -------------\r\n";
            
            //Parallel-For
            @* text += "Begin ParallelFor\r\n";
            await InvokeAsync(() => StateHasChanged());

            stopwatch.Restart();
            ConcurrentBag<Card> bagParallelFor = await ProcessCardsParallel(nbCards, cts.Token);
            

            double parallelForTime = stopwatch.ElapsedMilliseconds / 1000.0;
            text += $"ParallelFor Task - duration in seconds: {parallelForTime}\r\n";
            await InvokeAsync(() => StateHasChanged());
            
            //Console.WriteLine("------------ -------------\r\nParallel Cards\r\n------------ -------------");
            int itemsInBagParallelFor = 0;
            while (!bagParallelFor.IsEmpty){
                if (bagParallelFor.TryTake(out Card? citem)){
                    //Console.WriteLine($"{citem.CardName}/{citem.ThreadId}");
                    itemsInBagParallelFor++;
                }
            };

            text += $"{itemsInBagParallelFor} cards have been created\r\n";
            text += "------------ -------------\r\n"; *@

            //PLINQ
            text += "Begin PLINQ\r\n";
            await InvokeAsync(() => StateHasChanged());

            stopwatch.Restart();
            List<Task<Card>> tasksPlinq = await ProcessCardsPLinq(nbCardsToProcess, 
                cts.Token, 
                maxDegreeOfParallelism: Convert.ToInt32(.8*512));

            double parallelPlinqTime = stopwatch.ElapsedMilliseconds / 1000.0;
            text += $"ParallelFor Task - duration in seconds: {parallelPlinqTime}\r\n";
            await InvokeAsync(() => StateHasChanged());
            text += $"{tasksPlinq.Count} cards have been created\r\n";
            text += "------------ -------------\r\n";


            //PLINQ FORALL
            text += "Begin PLINQ FORALL\r\n";
            await InvokeAsync(() => StateHasChanged());

            stopwatch.Restart();
            ConcurrentBag<Card> bagPlinqForall = await ProcessCardsPLinqForAll(nbCardsToProcess, 
                cts.Token,
                maxDegreeOfParallelism:512);

            double parallelPlinqForAllTime = stopwatch.ElapsedMilliseconds / 1000.0;
            text += $"PlinqForAll Task - duration in seconds: {parallelPlinqForAllTime}\r\n";
            text += $"{bagPlinqForall.Count} cards have been created\r\n";
            await InvokeAsync(() => StateHasChanged());
            
            int itemsRemovedFromBag  = 0;
            bagPlinqForall.AsParallel()
                .ForAll(x => 
                {
                    if (bagPlinqForall.TryTake(out Card? citem)){
                        Interlocked.Increment(ref itemsRemovedFromBag);
                }
                });

            text += $"{itemsRemovedFromBag} cards have been removed from ConcurrentBag\r\n";
            text += $"{bagPlinqForall.Count} cards are left in the bag\r\n";
        }
        catch(OperationCanceledException){
             text += "Operation was cancelled\r\n";
        }
        catch (Exception ex){
            text = ex.Message;
            Console.WriteLine(ex.Message);

        }
        finally{
            text += "\r\n------------ -------------\r\n";
            text +="End\r\n";
            imageHidden = true;
            cts.Dispose();
        }

    }

    private async Task<List<Task<Card>>> ProcessCardsSelect(int nbCards, 
        CancellationToken token = default){
        
        using var semaphore = new SemaphoreSlim(SemaphoreSize);

        var tasks = Enumerable.Range(1,nbCards).Select(async x =>
        {
            await semaphore.WaitAsync();
            try{
                return CreateCard();
            }
            catch(OperationCanceledException){
                throw;
            }
            finally{
                semaphore.Release();
            }

        }).ToList();

        await Task.WhenAll(tasks);

        return tasks;
    }

    @* private async Task<ConcurrentBag<Card>> ProcessCardsParallel(int nbCards, 
        CancellationToken token = default,
        int maxDegreeOfParallelism = -1){
        
        ConcurrentBag<Card> cb = new();
        List<Task> bagAddTasks = new();
        
        Parallel.For(1,nbCards+1,
            new ParallelOptions{
                CancellationToken = token,
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            },
            async p =>{
                await Task.Run(() => bagAddTasks.Add(Task.Run(() =>cb.Add(CreateCard())) ) );
            });
        
        //await Task.WhenAll(bagAddTasks);
        Task.WaitAll(bagAddTasks.ToArray());
        return cb;
    } *@

    private async Task<ConcurrentBag<Card>> ProcessCardsParallelForEach(int nbCards, 
        CancellationToken token = default,
        int maxDegreeOfParallelism = -1){
        
        ConcurrentBag<Card> cb = new();
        List<Task> bagAddTasks = new();
        

        var cardsArray = Enumerable.Range(1, nbCards);

        await Parallel.ForEachAsync(cardsArray,
            new ParallelOptions{
                CancellationToken = token,
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            },
            async (cardsArray, _)  =>{
                try{
                    await Task.Run(() => bagAddTasks.Add(Task.Run(() => cb.Add(CreateCard())) ) );    
                }
                catch(OperationCanceledException){
                    throw;
                }
                //await Task.Run(async () => cb.Add(await CreateCard())) ;
            });
        
        //HACK:
        Task[] tasksArray = bagAddTasks.Where(t => t != null).ToArray();
        if (tasksArray.Length > 0){
            Task.WaitAll(tasksArray);   
            await Task.WhenAll(tasksArray);
        } 

        //await Task.WhenAll(bagAddTasks);
        //Task.WaitAll(bagAddTasks.ToArray());
        return cb;
    }
 
    private async Task<List<Task<Card>>> ProcessCardsPLinq(int nbCards, 
        CancellationToken token = default,
        int maxDegreeOfParallelism = 512){
        
        //REVIEW:
        //ParallelEnumerable.WithDegreeOfParallelism<TSource> && ParallelQuery<TSource>
        //ArgumentOutOfRangeException : degreeOfParallelism is less than 1 or greater than 512.

        ConcurrentBag<Card> cb = new();
        List<Task> bagAddTasks = new();
        
        var tasks = Enumerable.Range(1,nbCards).AsParallel()
            .WithDegreeOfParallelism(maxDegreeOfParallelism)
            .WithCancellation(cts.Token)
            .Select(x =>
            {
                try{
                    //return await CreateCard();
                    return Task.Run(() => CreateCard());
                }
                catch(OperationCanceledException){
                    throw;
                }
            }).ToList();

        await Task.WhenAll(tasks);

        return tasks;

        
    } 

    private async Task<ConcurrentBag<Card>> ProcessCardsPLinqForAll(int nbCards, 
        CancellationToken token = default,
        int maxDegreeOfParallelism = 512){
        
        ConcurrentBag<Card> cb = new();
       
            ParallelQuery<Task<Card>> tasksParallel = Enumerable.Range(1,nbCards)
                .AsParallel()
                .WithDegreeOfParallelism(maxDegreeOfParallelism)
                .WithCancellation(cts.Token)
                .Select(_ => Task.Run(() => CreateCard()));

            tasksParallel.ForAll(_ => 
            {
                cb.Add(CreateCard());
            });
            await Task.WhenAll(tasksParallel);
        
        return cb;        
    } 

    private Card CreateCard(){
        if (cts.Token.IsCancellationRequested ){
                    cts.Token.ThrowIfCancellationRequested();
                }
        //await Task.Delay(10);

        double randomValue = RandomNumberGenNew.NextDouble();
        string valueString = (randomValue * 100000000).ToString();
        string cardName = String.Join("_",Regex.Matches(valueString, @"\d{4}").Cast<Match>());
        //Console.WriteLine(cardName);
        return new Card(){
            CardName = cardName,
            ThreadId = Thread.CurrentThread.ManagedThreadId
        };
    }
    private void HandleCancel()
    {
        cts.Cancel();
    }
}


<style>
    .input-group {
        height: 700px;
        margin: .4rem 0;
    }
</style>
