@page "/TaskWhenAll"
@using Newtonsoft.Json;
@using System.Text
@using System.Diagnostics
@inject IConfiguration Config;

<h1>Tasks When All</h1>

<button @onclick="HandleClick">Start</button>

<div class="row">     
    <div class="form-group">
        <label id="lbTextBox" for="textBox" color="grey">To test UI responsiveness</label>
        <input class="form-control" id="textBox" placeholder="enter text..." type="search" />
    </div>
</div>

<div class="row col-md-6">
    <p>@text</p>
</div>

<div class="row">
    <div class="col-md-6">
        <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
    </div>
</div>


@code {
    private bool imageHidden = true;
    private string text = "";
    private string apiURL = "";
    public HttpClient httpClient = new();

    private async Task HandleClick()
    {
        text = "";
        imageHidden = false;

        Stopwatch stopWatch = new();

        try
        {
            apiURL = Config.GetValue<string>("apiURL");
            var cards = await GetCards(1000);
            stopWatch.Start();

            await ProcessCards(cards);

            await LazyManner();
        }
        catch (HttpRequestException ex)
        {
            text = ex.Message;
        }

        text = $"Operation done in : {stopWatch.ElapsedMilliseconds / 1000.0} seconds";

        imageHidden = true;
    }

    private async Task ProcessCards(List<string> cards)
    {
        List<Task<HttpResponseMessage>> tasks = new();

        await Task.Run(() =>
        {
            foreach (var card in cards)
            {
                var json = JsonConvert.SerializeObject(card);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                var responseTask = httpClient.PostAsync($"{apiURL}/cards", content);
                tasks.Add(responseTask);
            }
        });

        await Task.WhenAll(tasks);
    }
    private async Task<List<string>> GetCards(int amountofCardsToGenerate)
    {
        return await Task.Run(() =>
        {
            var cards = new List<string>();
            for (int i = 1; i <= amountofCardsToGenerate; i++)
            {
                cards.Add(i.ToString().PadLeft(16, '0'));
            }
            return cards;
        });
    }

    private async Task LazyManner()
    {
        Console.WriteLine("Hello World!");
 
        var numbers = Enumerable.Range(1, 10);
        int numberToPrint = 0;
        var tasks = numbers.Select(async number =>
        {
            await Task.Delay(1);
            Console.WriteLine("This ran");
            
            numberToPrint += number;
        });

        //NOTE: if you leave below commented, the content of Select never gets hit
        //await Task.WhenAll(tasks);
 
        await Task.Delay(1000);
 
        Console.WriteLine($"End - final number is {numberToPrint}");
    }
    

}