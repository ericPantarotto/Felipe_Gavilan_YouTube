@page "/TryCatch"
@inject IConfiguration Config;

<style>
    label {
    display: block;
    font: 1rem 'Fira Sans', sans-serif;
  	color: blue;
    margin: .4rem 0;
}
</style>


<h1>Try Catch</h1>

<button @onclick="HandleClick">Start</button>

<div class="row">     
    <div class="form-group">
        <label id="lbTextBox" for="textBox" color="grey">Input for text box</label>
        <input class="form-control" id="textBox" @bind="InputValue" placeholder="enter text..." type="search" />
    </div>
</div>

<div class="row col-md-6">
    <p>@text</p>
</div>

<div class="row">
    <div class="col-md-6">
        <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
    </div>
</div>


@code {
    private bool imageHidden = true;
    private string text = "";
    private string apiURL = "";
    public HttpClient httpClient = new();
    private string? InputValue { get; set; }

    private async Task HandleClick()
    {
        imageHidden = false;

        text = "";
        try
        {
            apiURL = Config.GetValue<string>("apiURL");
            var greeting = await GetGreetings(InputValue ?? string.Empty);
            text = greeting;
        }
        catch (HttpRequestException ex)
        {
            text = ex.Message;
        }

        imageHidden = true;
    }

    private async Task<string> GetGreetings(string name)
    {
        using var response = await httpClient.GetAsync($"{apiURL}/greetings/{name}");
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsStringAsync();
    }

}