@page "/SynchronisationContext"
@inject IConfiguration Config;

<h1>Synchronisation Context</h1>

<button class="btn btn-primary" @onclick="HandleClick">Start</button>
<div class="row">     
    <div class="form-group">
        <label id="lbTextBox" for="textBox" color="grey">Input for text box</label>
        <input class="form-control" id="textBox" @bind="InputValue" placeholder="enter text..." type="search" />
    </div>
</div>

<div class="row col-md-6">
    <p>@text</p>
</div>

<div class="row">
    <p>@textAfter</p>
</div>

<div class="row">
    <p>@textGreeting</p>
</div>

<div class="row">
    <div class="col-md-6">
        <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
    </div>
</div>



@code {
    private bool imageHidden = true;
    private string text = "";
    private string textAfter = "";
    private string textGreeting = "";
    private string? InputValue { get; set; }
    private string apiURL = "";
    public HttpClient httpClient = new();

    private async Task HandleClick()
    {

        text = "";
        textAfter = "";
        textGreeting = "";
        imageHidden = false;

        try{
            text = $"Thread bf the await: {Thread.CurrentThread.ManagedThreadId}";
            Console.WriteLine($"Thread bf the await: {Thread.CurrentThread.ManagedThreadId}");

            await Task.Delay(TimeSpan.FromSeconds(1));

            textAfter = $"Thread after the await: {Thread.CurrentThread.ManagedThreadId}";
            Console.WriteLine($"Thread after the await: {Thread.CurrentThread.ManagedThreadId}");

            apiURL = Config.GetValue<string>("apiURL");
            textGreeting = await GetGreetings(InputValue ?? string.Empty);
            
        }
        catch (Exception ex){
            textAfter = ex.Message;
        }
        finally{
            imageHidden = true;
        }
    }
    private async Task<string> GetGreetings(string name)
    {
        using var response = await httpClient.GetAsync($"{apiURL}/greetings/async/{name}");
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsStringAsync();
    }


}