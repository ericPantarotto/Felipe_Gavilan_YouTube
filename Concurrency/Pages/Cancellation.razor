@page "/Cancellation"
@using Models
@using Newtonsoft.Json;
@using System.Text
@using System.Diagnostics
@inject IConfiguration Config;

<h1>Cancellation Token</h1>

<button class="btn btn-primary" @onclick="HandleClick">Start</button>
<button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>

<div class="row col-md-6">
    <p>@text</p>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="progress">
            <div class="progress-bar h-75" role="progressbar" style="width: @pgCards%" aria-valuenow="@pgCards"
                aria-valuemin="0" aria-valuemax="100">@pgCards%</div>
        </div>
    </div>

</div>
<div class="col-md-4">
    cards created: @nbCardsProcessed / @NbCardsToProcess
</div>
<div class="row">
    <p>@textRejectedCards</p>
</div>

<div class="row">
    <div class="col-md-6">
        <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
    </div>
</div>



@code {
    private bool imageHidden = true;
    private string text = "";
    private string textRejectedCards = "";
    private string apiURL = "";
    public HttpClient httpClient = new();
    private int NbCardsToProcess = 1000;
    private int SemaphoreSize = 200;
    private int pgCards;
    private int nbCardsProcessed;
    //NOTE: creating our cancellation token source, we need one for the api requests and one for the progress bar
    private CancellationTokenSource cts = new(); 
    private CancellationTokenSource ctsProgress = new();

    private async Task HandleClick()
    {
        cts = new();
        ctsProgress = new();
        var progressReport = new Progress<(int, int)>(ReportCardProcessingProgress);

        text = "";
        pgCards = 0;
        nbCardsProcessed = 0;
        imageHidden = false;

        Stopwatch stopWatch = new();
        
        try{
            apiURL = Config.GetValue<string>("apiURL");
            var cards = await GetCards(NbCardsToProcess);
            stopWatch.Start();

            //NOTE: passing our cts to the method
            await ProcessCards(cards, progressReport, cts.Token, ctsProgress.Token);

            text = $"Operation done in : {stopWatch.ElapsedMilliseconds / 1000.0} seconds";
        }
        catch (HttpRequestException ex){
            text = ex.Message;
        }
        catch(OperationCanceledException){
            text = "Operation was cancelled";
            //pgCards = nbCardsProcessed =  0;
            pgCards = 0;
            StateHasChanged();
        }
        finally{
            imageHidden = true;
            //NOTE: our cts implements IDisposable
            cts.Dispose(); 
            ctsProgress.Dispose();
        }
    }

    //NOTE: handling the cancel via the UI button
    private void HandleCancel() 
    {
        cts.Cancel();
        ctsProgress.Cancel();
    }

    private async void ReportCardProcessingProgress((int percentage, int nbTask) reportedValues)
    {
        pgCards = reportedValues.percentage;
        nbCardsProcessed = reportedValues.nbTask;

        await InvokeAsync(() => StateHasChanged());
    }


    private async Task ProcessCards(List<string> cards,
        IProgress<(int, int)>? progress,
        CancellationToken token = default,
        CancellationToken tokenProgress = default) 
    //NOTE: Default value will be a dummy cancellation token, so that if the client of the method
    // doesn't want to send a cancellation token , the client doesn't have too
    {
        textRejectedCards = "";
        nbCardsProcessed =  0;
        using var semaphore = new SemaphoreSlim(SemaphoreSize);

        List<Task<HttpResponseMessage>> tasks = cards.Select(async card =>
        {
            var json = JsonConvert.SerializeObject(card);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            await semaphore.WaitAsync();
            try{
                //NOTE: this is the main operation of our method and where we can pass a token
                // we can usually pass token to an http request that we pass to the server
                var internalTask = await httpClient.PostAsync($"{apiURL}/cards", content, token); //NOTE: passing our token

                return internalTask;
            }
            finally
            {
                semaphore.Release();
            }
        }).ToList();

        Task<HttpResponseMessage[]> responsesTasks = Task.WhenAll(tasks);

        List<string> rejectedCards = new();

        if (progress is not null){
            int completedTasks = 0;

            while (await Task.WhenAny(responsesTasks, Task.Delay(TimeSpan.FromSeconds(1), tokenProgress)) != responsesTasks 
            || (completedTasks != tasks.Count))
            {
                if (cts.Token.IsCancellationRequested ){
                    cts.Token.ThrowIfCancellationRequested();
                }
                    
                completedTasks = tasks.Where(x => x.IsCompleted).Count();
                double percentage = (double)completedTasks / tasks.Count * 100;
                int pecentageInt = Convert.ToInt32(Math.Round(percentage, 0));
                progress.Report((pecentageInt, completedTasks));

                foreach(var t in tasks)
                {
                    if(t.Status is TaskStatus.RanToCompletion)
                    {
                        var content = await t.Result.Content.ReadAsStringAsync();
                        var responseCard = JsonConvert.DeserializeObject<CardResponse>(content);
                        if (responseCard?.Approved == false && !rejectedCards.Any(rc => rc == responseCard.Card))
                        {
                            rejectedCards.Add(responseCard.Card);
                        }
                    }
                }
                textRejectedCards = $"{rejectedCards.Count} cards were rejected";
            } 
        }

        rejectedCards.ToList().ForEach(card => Console.WriteLine($"Card {card} was rejected"));
        Console.WriteLine($"{rejectedCards.Count} cards were rejected");

    }
    private async Task<List<string>> GetCards(int amountofCardsToGenerate)
    {
        return await Task.Run(() =>
        {
        var cards = new List<string>();
        for (int i = 1; i <= amountofCardsToGenerate; i++)
        {
            cards.Add(i.ToString().PadLeft(16, '0'));
        }
        return cards;
        });
    }

}