@page "/WhenAny"
@using Models
@using Newtonsoft.Json;
@using System.Text
@using System.Diagnostics
@inject IConfiguration Config;

<h1>When Any</h1>

<button class="btn btn-primary" @onclick="HandleClick">Start</button>

<div class="row col-md-6">
    <p>@text</p>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="progress">
            <div class="progress-bar h-75" role="progressbar" style="width: @pgCards%" aria-valuenow="@pgCards"
                aria-valuemin="0" aria-valuemax="100">@pgCards%</div>
        </div>
    </div>

</div>
<div class="col-md-4">
    cards created: @nbCardsProcessed / @NbCardsToProcess
</div>

<div class="row col-md-6">
    <p>@textRejectedCards</p>
</div>

<div class="row">
    <div class="col-md-6">
        <img src="spinning-loading.gif" alt="Image" hidden="@imageHidden">
    </div>
</div>



@code {
    private bool imageHidden = true;
    private string text = "";
    private string textRejectedCards = "";
    private string apiURL = "";
    public HttpClient httpClient = new();
    private int NbCardsToProcess = 5000;
    private int SemaphoreSize = 400;
    private int pgCards;
    private int nbCardsProcessed;
    


    private async Task HandleClick()
    {
        var progressReport = new Progress<(int, int)>(ReportCardProcessingProgress);

        text = "";
        pgCards = 0;
        nbCardsProcessed = 0;
        imageHidden = false;

        Stopwatch stopWatch = new();

        try
        {
            apiURL = Config.GetValue<string>("apiURL");
            var cards = await GetCards(NbCardsToProcess);
            stopWatch.Start();

            await ProcessCards(cards, progressReport);

            text = $"Operation done in : {stopWatch.ElapsedMilliseconds / 1000.0} seconds";
        }
        catch (HttpRequestException ex)
        {
            text = ex.Message;
        }
        finally
        {
            imageHidden = true;
        }
    }


    private async void ReportCardProcessingProgress((int percentage, int nbTask) reportedValues)
    {
        pgCards = reportedValues.percentage;
        nbCardsProcessed = reportedValues.nbTask;

        await InvokeAsync(() => StateHasChanged());
    }


    private async Task ProcessCards(List<string> cards, IProgress<(int, int)>? progress)
    {
        using var semaphore = new SemaphoreSlim(SemaphoreSize);

        List<Task<HttpResponseMessage>> tasks = new();

        tasks = cards.Select(async card =>
        {
            var json = JsonConvert.SerializeObject(card);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            //NOTE: The progress monitoring was done below , but this can be slow
            //dependng on the complexity of the computation: we will implement whenAny lower
            await semaphore.WaitAsync();
            try
            {
                var internalTask = await httpClient.PostAsync($"{apiURL}/cards", content);

                return internalTask;
            }
            finally
            {
                semaphore.Release();
            }
        }).ToList();

        Task<HttpResponseMessage[]> responsesTasks = Task.WhenAll(tasks); //NOTE: we remove the await

        //NOTE: when Any, we only return the first task that finished, what we are doing here is reporting progress each 2s
        //we will exit the while once the 2 list of http response are identical
        if (progress is not null)
        {
            int completedTasks = 0;
            while (await Task.WhenAny(responsesTasks, Task.Delay(TimeSpan.FromSeconds(2))) != responsesTasks
            || (completedTasks != NbCardsToProcess))
            {
                completedTasks = tasks.Where(x => x.IsCompleted).Count();
                double percentage = (double)completedTasks / tasks.Count * 100;
                int pecentageInt = Convert.ToInt32(Math.Round(percentage, 0));
                progress.Report((pecentageInt, completedTasks));
            }
        }

        HttpResponseMessage[] responses = await responsesTasks;

        List<string> rejectedCards = new();

        responses.ToList().ForEach(async response =>
        {
            var content = await response.Content.ReadAsStringAsync();
            var responseCard = JsonConvert.DeserializeObject<CardResponse>(content);
            if (responseCard?.Approved == false)
            {
                rejectedCards.Add(responseCard.Card);
            }
        });

        rejectedCards.ToList().ForEach(card => Console.WriteLine($"Card {card} was rejected"));
        Console.WriteLine($"{rejectedCards.Count} cards were rejected");
        textRejectedCards = $"{rejectedCards.Count} cards were rejected";

    }
    private async Task<List<string>> GetCards(int amountofCardsToGenerate)
    {
        return await Task.Run(() =>
        {
            var cards = new List<string>();
            for (int i = 1; i <= amountofCardsToGenerate; i++)
            {
                cards.Add(i.ToString().PadLeft(16, '0'));
            }
            return cards;
        });


    }

}